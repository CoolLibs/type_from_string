# ---HOW TO---
# Modify `all_associations()` and `includes()`, then run this script.
# ------------


def all_associations():
    return {
        "bool":        ["bool"],
        "int":         ["int"],
        "float":       ["float",  "vec1"],
        "glm::vec2":   ["float2", "vec2"],
        "glm::vec3":   ["float3", "vec3"],
        "glm::vec4":   ["float4", "vec4"],
        "Cool::Color": ["Color"],
        "Cool::Angle": ["Angle"],
        "Cool::Hue":   ["Hue"],
    }


def includes():
    return f"""
#include <glm/glm.hpp>
"""


def clear_generated_folder():
    import shutil
    import os
    shutil.rmtree(output_folder())
    os.makedirs(output_folder())


def output_folder():
    import os
    from pathlib import Path
    root_folder = Path(__file__).parent
    return os.path.join(root_folder, "generated")


def generate(name):
    generate_file(name, eval(f"{name}()"))


def generate_file(name, content):
    import os
    with open(os.path.join(output_folder(), name) + ".inl", 'w') as f:
        f.write(heading(name) + content)


def heading(function_name):
    import os
    return f"""/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "{os.path.basename(__file__)}" and edit the "{function_name}" function there.
 * -----------------------------------------------------------------------------
 */
"""


def string_to_type_associations():
    out = "\n"
    for key, values in all_associations().items():
        for value in values:
            out += f"""
template<>
struct from_impl<"{value}"> {{
    using type = {key};
}};
"""
    return out


clear_generated_folder()
generate("string_to_type_associations")
generate("includes")
